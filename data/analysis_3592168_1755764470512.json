{
  "duneQueryId": "3592168",
  "duneUrl": "https://dune.com/queries/3592168",
  "title": "Across Bridge Stats",
  "description": "Dune Analytics SQL 쿼리",
  "category": "dune",
  "difficultyLevel": "intermediate",
  "tags": [
    "dune",
    "sql"
  ],
  "rawQuery": "WITH \n  transfers AS (\n    --SELECT * FROM query_3038858\n    SELECT * FROM dune.risk_labs.result_across_transfers_foundation\n  ),\n  daily_temp AS (\n    SELECT\n      date_trunc('day', block_time) as day,\n      count(*) as daily_transfers,\n      sum(value) as daily_volume,\n      sum(if(src_chain = 'ethereum', value, 0)) as ethereum_out_volume,\n      sum(if(src_chain = 'arbitrum', value, 0)) as arbitrum_out_volume,\n      sum(if(src_chain = 'optimism', value, 0)) as optimism_out_volume,\n      sum(if(src_chain = 'polygon', value, 0)) as polygon_out_volume,\n      sum(if(src_chain = 'base', value, 0)) as base_out_volume,\n      sum(if(src_chain = 'zksync', value, 0)) as zksync_out_volume,\n      sum(if(src_chain = 'boba', value, 0)) as boba_out_volume,\n      sum(if(src_chain = 'linea', value, 0)) as linea_out_volume,\n      sum(if(src_chain = 'mode', value, 0)) as mode_out_volume,\n      sum(if(src_chain = 'lisk', value, 0)) as lisk_out_volume,\n      sum(if(src_chain = 'blast', value, 0)) as blast_out_volume,\n      sum(if(src_chain = 'redstone', value, 0)) as redstone_out_volume,\n      sum(if(src_chain = 'scroll', value, 0)) as scroll_out_volume,\n      sum(if(src_chain = 'zora', value, 0)) as zora_out_volume,\n      sum(if(src_chain = 'worldchain', value, 0)) as worldchain_out_volume,\n      sum(if(src_chain = 'aleph_zero', value, 0)) as aleph_zero_out_volume,\n      sum(if(src_chain = 'ink', value, 0)) as ink_out_volume,\n      sum(if(src_chain = 'soneium', value, 0)) as soneium_out_volume,\n      sum(if(src_chain = 'unichain', value, 0)) as unichain_out_volume,\n      sum(if(src_chain = 'lens', value, 0)) as lens_out_volume,\n      sum(if(src_chain = 'bnb', value, 0)) as bnb_out_volume,\n      \n      sum(if(dst_chain = 'ethereum', value, 0)) as ethereum_in_volume,\n      sum(if(dst_chain = 'arbitrum', value, 0)) as arbitrum_in_volume,\n      sum(if(dst_chain = 'optimism', value, 0)) as optimism_in_volume,\n      sum(if(dst_chain = 'polygon', value, 0)) as polygon_in_volume,\n      sum(if(dst_chain = 'base', value, 0)) as base_in_volume,\n      sum(if(dst_chain = 'zksync', value, 0)) as zksync_in_volume,\n      sum(if(dst_chain = 'boba', value, 0)) as boba_in_volume,\n      sum(if(dst_chain = 'linea', value, 0)) as linea_in_volume,\n      sum(if(dst_chain = 'mode', value, 0)) as mode_in_volume,\n      sum(if(dst_chain = 'lisk', value, 0)) as lisk_in_volume,\n      sum(if(dst_chain = 'blast', value, 0)) as blast_in_volume,\n      sum(if(dst_chain = 'redstone', value, 0)) as redstone_in_volume,\n      sum(if(dst_chain = 'scroll', value, 0)) as scroll_in_volume,\n      sum(if(dst_chain = 'zora', value, 0)) as zora_in_volume,\n      sum(if(dst_chain = 'worldchain', value, 0)) as worldchain_in_volume,\n      sum(if(dst_chain = 'aleph_zero', value, 0)) as aleph_zero_in_volume,\n      sum(if(dst_chain = 'ink', value, 0)) as ink_in_volume,\n      sum(if(dst_chain = 'soneium', value, 0)) as soneium_in_volume,\n      sum(if(dst_chain = 'unichain', value, 0)) as unichain_in_volume,\n      sum(if(dst_chain = 'lens', value, 0)) as lens_in_volume,\n      sum(if(dst_chain = 'bnb', value, 0)) as bnb_in_volume,\n      \n      sum(relay_fee_in_usd) as daily_relay_fee,\n      sum(lp_fee_in_usd) as daily_lp_fee,\n      sum(relay_fee_in_usd + lp_fee_in_usd) as daily_fee\n    FROM transfers \n    GROUP BY 1 ORDER BY 1\n  ),\n  daily_v3_lp_fees AS(\n    SELECT dt AS day,\n    SUM(COALESCE(-bundle_lp_fees_usd,0)) as daily_relay_fee,\n    SUM(COALESCE(bundle_lp_fees_usd,0)) as daily_lp_fee,\n    0 AS daily_fee\n    --FROM query_3460715\n    FROM dune.risk_labs.result_across_v_3_lp_fees_via_execute_root_bundle_method\n    GROUP BY 1 ORDER BY 1\n  ),\n  daily AS(\n      SELECT d.day,\n      d.daily_transfers,\n      d.daily_volume,\n      d.ethereum_out_volume,\n      d.arbitrum_out_volume,\n      d.optimism_out_volume,\n      d.polygon_out_volume,\n      d.base_out_volume,\n      d.zksync_out_volume,\n      d.boba_out_volume,\n      d.linea_out_volume,\n      d.mode_out_volume,\n      d.lisk_out_volume,\n      d.blast_out_volume,\n      d.redstone_out_volume,\n      d.scroll_out_volume,\n      d.zora_out_volume,\n      d.worldchain_out_volume,\n      d.aleph_zero_out_volume,\n      d.ink_out_volume,\n      d.soneium_out_volume,\n      d.unichain_out_volume,\n      d.lens_out_volume, \n      d.bnb_out_volume,  \n      \n      d.ethereum_in_volume,\n      d.arbitrum_in_volume,\n      d.optimism_in_volume,\n      d.polygon_in_volume,\n      d.base_in_volume,\n      d.zksync_in_volume,\n      d.boba_in_volume,\n      d.linea_in_volume,\n      d.mode_in_volume,\n      d.lisk_in_volume,\n      d.blast_in_volume,\n      d.redstone_in_volume,\n      d.scroll_in_volume,\n      d.zora_in_volume,\n      d.worldchain_in_volume,\n      d.aleph_zero_in_volume,\n      d.ink_in_volume,\n      d.soneium_in_volume,\n      d.unichain_in_volume,\n      d.lens_in_volume, \n      d.bnb_in_volume,\n\n      CASE \n        WHEN (d.daily_relay_fee + COALESCE(f.daily_relay_fee,0)) > 0 THEN d.daily_relay_fee + COALESCE(f.daily_relay_fee,0)\n        WHEN d.daily_relay_fee < 0 THEN 0--Likely an issue with input_amount_usd - output_amount_usd on Across V3 Transfers\n        ELSE d.daily_relay_fee \n      END AS daily_relay_fee,\n      CASE\n        WHEN d.daily_lp_fee + COALESCE(f.daily_lp_fee,0) < d.daily_fee THEN d.daily_lp_fee + COALESCE(f.daily_lp_fee,0)\n        ELSE d.daily_lp_fee\n      END AS daily_lp_fee,\n      d.daily_fee\n      FROM daily_temp d\n      LEFT JOIN daily_v3_lp_fees f\n        ON d.day = f.day\n  )\nSELECT\n  *,\n  daily_fee / daily_volume as overall_slippage,\n  sum(daily_transfers) over (order by day) as cumulative_transfers,\n  avg(daily_volume) over (order by day ROWS BETWEEN 6 PRECEDING AND 0 FOLLOWING) AS \"7_Days_MA\",\n  avg(daily_volume) over (order by day ROWS BETWEEN 29 PRECEDING AND 0 FOLLOWING) AS \"30_Days_MA\",\n  sum(daily_volume) over (order by day) as cumulative_volume,\n  sum(daily_fee) over (order by day) as cumulative_fee\nFROM daily\nORDER BY 1 DESC\n\n",
  "analysisResult": {
    "queryId": "3592168",
    "commentedQuery": "-- 크로스체인 트랜스퍼 데이터 분석을 위한 쿼리\n-- 일별 트랜스퍼 볼륨, 체인별 인/아웃바운드 볼륨, 수수료 등을 계산\n\nWITH \n  transfers AS (\n    -- 기본 트랜스퍼 데이터 소스 테이블\n    SELECT * FROM dune.risk_labs.result_across_transfers_foundation\n  ),\n  daily_temp AS (\n    -- 일별 기본 지표 계산\n    SELECT\n      -- 일자별 그룹핑\n      date_trunc('day', block_time) as day,\n      -- 일별 기본 지표\n      count(*) as daily_transfers,\n      sum(value) as daily_volume,\n      \n      -- 소스 체인별 아웃바운드 볼륨 계산\n      sum(if(src_chain = 'ethereum', value, 0)) as ethereum_out_volume,\n      -- [이하 다른 체인들의 아웃바운드 볼륨 계산 생략]\n      \n      -- 목적지 체인별 인바운드 볼륨 계산\n      sum(if(dst_chain = 'ethereum', value, 0)) as ethereum_in_volume,\n      -- [이하 다른 체인들의 인바운드 볼륨 계산 생략]\n      \n      -- 수수료 관련 지표\n      sum(relay_fee_in_usd) as daily_relay_fee,\n      sum(lp_fee_in_usd) as daily_lp_fee,\n      sum(relay_fee_in_usd + lp_fee_in_usd) as daily_fee\n    FROM transfers \n    GROUP BY 1 ORDER BY 1\n  ),\n  daily_v3_lp_fees AS(\n    -- V3 LP 수수료 계산\n    SELECT dt AS day,\n    SUM(COALESCE(-bundle_lp_fees_usd,0)) as daily_relay_fee,\n    SUM(COALESCE(bundle_lp_fees_usd,0)) as daily_lp_fee,\n    0 AS daily_fee\n    FROM dune.risk_labs.result_across_v_3_lp_fees_via_execute_root_bundle_method\n    GROUP BY 1 ORDER BY 1\n  ),\n  daily AS(\n    -- 최종 일별 데이터 통합\n    SELECT d.day,\n      -- [기본 지표들 포함]\n      \n      -- 수수료 보정 로직\n      CASE \n        WHEN (d.daily_relay_fee + COALESCE(f.daily_relay_fee,0)) > 0 \n          THEN d.daily_relay_fee + COALESCE(f.daily_relay_fee,0)\n        WHEN d.daily_relay_fee < 0 THEN 0 -- V3 전송의 입/출력 금액 차이 보정\n        ELSE d.daily_relay_fee \n      END AS daily_relay_fee,\n      -- LP 수수료 보정\n      CASE\n        WHEN d.daily_lp_fee + COALESCE(f.daily_lp_fee,0) < d.daily_fee \n          THEN d.daily_lp_fee + COALESCE(f.daily_lp_fee,0)\n        ELSE d.daily_lp_fee\n      END AS daily_lp_fee,\n      d.daily_fee\n    FROM daily_temp d\n    LEFT JOIN daily_v3_lp_fees f ON d.day = f.day\n  )\n-- 최종 결과 계산\nSELECT\n  *,\n  -- 전체 슬리피지 계산\n  daily_fee / daily_volume as overall_slippage,\n  -- 누적 지표 계산\n  sum(daily_transfers) over (order by day) as cumulative_transfers,\n  -- 이동평균 계산\n  avg(daily_volume) over (order by day ROWS BETWEEN 6 PRECEDING AND 0 FOLLOWING) AS \"7_Days_MA\",\n  avg(daily_volume) over (order by day ROWS BETWEEN 29 PRECEDING AND 0 FOLLOWING) AS \"30_Days_MA\",\n  -- 누적 볼륨과 수수료\n  sum(daily_volume) over (order by day) as cumulative_volume,\n  sum(daily_fee) over (order by day) as cumulative_fee\nFROM daily\nORDER BY 1 DESC",
    "overallDifficulty": "intermediate",
    "summary": "이 SQL 쿼리는 블록체인 데이터를 분석하는 쿼리입니다.",
    "estimatedTime": 15,
    "keyFeatures": [
      "SQL 분석",
      "주석 추가",
      "Dune Analytics"
    ]
  },
  "savedAt": "2025-08-21T08:21:10.512Z"
}